import { Injectable } from '@angular/core';
// import { User } from './user';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { UserItem } from '../components/user-profile/user';

import {
  HttpClient,
  HttpHeaders,
  HttpErrorResponse
} from '@angular/common/http';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  endpoint: string = 'http://localhost:4000/authApi';
  headers = new HttpHeaders().set('Content-Type', 'application/json');
  currentUser = {};
  private userSource = new BehaviorSubject<UserItem>(undefined);
  userShared = this.userSource.asObservable();
  isUserAPICallMade: boolean = false;
  public currentId: String;

  constructor(private http: HttpClient, public router: Router) {}

  // Sign-up  // the signUp() method stores the user name, email and password in mongoDB database.
  signUp(user: UserItem): Observable<any> {
    let authApi = `${this.endpoint}/register-user`;
    return this.http.post(authApi, user).pipe(catchError(this.handleError));
  }

  // Sign-in  // The signin() method allows the user to access in the app using JSON web token generated by node server.
  signIn(user: UserItem) {
    return this.http
      .post<any>(`${this.endpoint}/signin`, user)
      .subscribe((res: any) => {
        // console.log(res);
        localStorage.setItem('access_token', res.token);

        localStorage.setItem('userId', res._id);

        this.getUserProfile(res._id).subscribe(res => {
          localStorage.setItem('userPhoto', res.msg.personal.photoUrl);
          localStorage.setItem('userName', res.msg.personal.name);

          this.currentUser = res;
          // this.router.navigate(["home/"]); // -- naviganes after susseful ligin
          // this.router.navigate(["user-profile/" + res.msg._id]); -- old
        });
      });
  }

  // We are getting JWT token from the API response and storing in the local storage,
  //then in the getToken() method, we are accessing the token via local storage getItem() method.
  getToken() {
    return localStorage.getItem('access_token');
  }

  // the isLoggedIn method returns true if the user is logged in else returns false.
  get isLoggedIn(): boolean {
    let authToken = localStorage.getItem('access_token');
    return authToken !== null ? true : false;
  }

  get UserId(): any {
    return localStorage.getItem('userId');
  }

  get UserName(): any {
    return localStorage.getItem('userName');
  }

  get UserPhoto(): any {
    return localStorage.getItem('userPhoto');
  }

  doLogout() {
    let removeToken = localStorage.removeItem('access_token');
    let removeUserId = localStorage.removeItem('userId');
    let removeUserPhoto = localStorage.removeItem('userPhoto');
    let removeUserName = localStorage.removeItem('userName');
    if (removeToken == null) {
      this.router.navigate(['log-in']);
    }
  }

  // This method could be called many times from a lot of components
  // which are subscribed to this.userShared/this.userSource data.
  // Initially this.userSource is 'undefined' so we need to call the /user-profile API at least once
  // to get this data and update the observable user property.
  // In order to avoid multiple API calls triggered in this case, components are calling this method
  // instead of the getUserProfile() directly. This way we are sure that the API is called only once
  getCurrentUserData() {
    if (!this.isUserAPICallMade && this.UserId) {
      this.isUserAPICallMade = true;
      this.getUserProfile(this.UserId).subscribe();
    }
    return this.userShared;
  }

  // User profile
  getUserProfile(id): Observable<any> {
    let authApi = `${this.endpoint}/user-profile/${id}`;
    return this.http.get(authApi, { headers: this.headers }).pipe(
      map((res: any) => {
        if (this.UserId && res.msg && res.msg._id === this.UserId) {
          this.userSource.next(res.msg);
        }
        return res || {};
      }),
      catchError(this.handleError)
    );
  }

  // Error
  handleError(error: HttpErrorResponse) {
    let msg = '';
    if (error.error instanceof ErrorEvent) {
      // client-side error
      msg = error.error.message;
    } else {
      // server-side error
      msg = `Error Code: ${error.status}\nMessage: ${error.message}`;
    }
    return throwError(msg);
  }
}
