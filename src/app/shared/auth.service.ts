import { Injectable } from "@angular/core";
import { User } from "./user";
import { Observable, throwError } from "rxjs";
import { catchError, map } from "rxjs/operators";
import {
  HttpClient,
  HttpHeaders,
  HttpErrorResponse,
} from "@angular/common/http";
import { Router } from "@angular/router";

@Injectable({
  providedIn: "root",
})
export class AuthService {
  endpoint: string = "http://localhost:4000/authApi";
  headers = new HttpHeaders().set("Content-Type", "application/json");
  currentUser = {};
  public currentId: String;

  constructor(private http: HttpClient, public router: Router) {}

  // Sign-up  // the signUp() method stores the user name, email and password in mongoDB database.
  signUp(user: User): Observable<any> {
    let authApi = `${this.endpoint}/register-user`;
    return this.http.post(authApi, user).pipe(catchError(this.handleError));
  }

  // Sign-in  // The signin() method allows the user to access in the app using JSON web token generated by node server.
  signIn(user: User) {
    return this.http
      .post<any>(`${this.endpoint}/signin`, user)
      .subscribe((res: any) => {
        console.log(res._id);
        localStorage.setItem("access_token", res.token);
        localStorage.setItem("userId", res._id);
        this.getUserProfile(res._id).subscribe((res) => {

          this.currentUser = res;
          console.log(this.currentUser);
          this.router.navigate(["user-profile/" + res.msg._id]);
        });
      });
  }

  // We are getting JWT token from the API response and storing in the local storage,
  //then in the getToken() method, we are accessing the token via local storage getItem() method.
  getToken() {
    return localStorage.getItem("access_token");
  }

  // the isLoggedIn method returns true if the user is logged in else returns false.
  get isLoggedIn(): boolean {
    let authToken = localStorage.getItem("access_token");
    return authToken !== null ? true : false;
  }

  get UserId(): any {
    return localStorage.getItem("userId");
  }

  doLogout() {
    let removeToken = localStorage.removeItem("access_token");
    let removeUserId = localStorage.removeItem("userId");
    if (removeToken == null) {
      this.router.navigate(["log-in"]);
    }
  }

  // User profile
  getUserProfile(id): Observable<any> {
    let authApi = `${this.endpoint}/user-profile/${id}`;
    return this.http.get(authApi, { headers: this.headers }).pipe(
      map((res: Response) => {
        return res || {};
      }),
      catchError(this.handleError)
    );
  }

  

  // Error
  handleError(error: HttpErrorResponse) {
    let msg = "";
    if (error.error instanceof ErrorEvent) {
      // client-side error
      msg = error.error.message;
    } else {
      // server-side error
      msg = `Error Code: ${error.status}\nMessage: ${error.message}`;
    }
    return throwError(msg);
  }
}
